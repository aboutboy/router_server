#ifndef DB_CONFIG_H
#define DB_CONFIG_H

extern char g_root_dir[64];
extern unsigned char g_root_level;


//#define  ROOT_DIR     "/home/taos/fs"
//#define  ROOT_LEVEL   3

#define  ROOT_DIR     g_root_dir
#define  ROOT_LEVEL   0//default 3


#define  ROOT_DIR_ID  0
#define  RECYCLE_BIN_NAME ".trash"
#define  RECOVER_DIR_NAME ".recover"


#define SQLITE_CREATE_FILE_TABLE \
    "CREATE TABLE IF NOT EXISTS file_table(ID INT PRIMARY KEY NOT NULL,"\
	"NAME CHAR NOT NULL,"\
	"PATH CHAR NOT NULL,"\
	"PARENT_ID INT NOT NULL,"\
	"TYPE INT NOT NULL,"\
	"SIZE INT NOT NULL,"\
	"CREATE_TIME INT NOT NULL,"\
	"MEDIA_INFO_INDEX INT NOT NULL,"\
	"DIR INT NOT NULL,"\
	"FILE_UUID CHAR NOT NULL,"\
	"MIME_TYPE CHAR NOT NULL,"\
	"CHANGE_TIME CHAR NOT NULL,"\
	"ACCESS_TIME CHAR);"


#define SQLITE_CREATE_VIDEO_TABLE \
	"CREATE TABLE video_table("\
	"ID INT PRIMARY KEY NOT NULL,"\
	"WIDTH INT,"\
	"HEIGHT INT,"\
	"BITRATE INT,"\
	"ENCODE CHAR,"\
	"DURATION INT);"

#define SQLITE_CREATE_AUDIO_TABLE \
	"CREATE TABLE audio_table("\
	"ID INT PRIMARY KEY NOT NULL,"\
	"DURATION INT,"\
	"NAME CHAR NOT NULL,"\
	"ALBUM CHAR,"\
	"ARTIST CHAR,"\
	"ENCODE CHAR,"\
	"BITRATE INT);"

#define SQLITE_CREATE_PHOTO_TABLE \
	"create table photo_table("\
	"ID INT PRIMARY KEY NOT NULL,"\
	"WIDTH INT,"\
	"HEIGHT INT,"\
	"TIME INT,"\
	"VENDOR_NAME CHAR,"\
	"CAMERA_TYPE CHAR," \
	"APERTURE_VALUE INT,"\
	"EXPOSURE_TIME INT,"\
	"ISO_VAL INT,"\
	"EXPOSURE_BIAS_VAL INT,"\
	"FOCAL_LENGTH INT,"\
	"MAX_APETURE_VAL INT,"\
	"METER_MODE INT,"\
	"FLASH INT,"\
	"GROUP_ID INT);"

#define SQLITE_CREATE_USER_TABLE \
	"create table IF NOT EXISTS user_table(SESSION CHAR PRIMARY KEY NOT NULL,"\
	"USER_NAME    CHAR NOT NULL,"\
	"PASSWORD     CHAR NOT NULL,"\
	"IP        CHAR NOT NULL,"\
	"DEVICE_UUID CHAR NOT NULL,"\
	"DEVICE_NAME CHAR);"

#define SQLITE_CREATE_DEVICE_TABLE \
	"create table IF NOT EXISTS device_table("\
	"ID INT NOT NULL,"\
	"DEVICE_NAME CHAR NOT NULL,"\
	"DEVICE_UUID CHAR UNIQUE NOT NULL,"\
	"DISK_UUID CHAR NOT NULL);"
#define SQLITE_CREATE_HDISK_TABLE \
 	"CREATE TABLE IF NOT EXISTS hdisk_table("\
 	"ID INT PRIMARY KEY NOT NULL,"\
 	"UUID CHAR UNIQUE NOT NULL,"\
	"PID CHAR NOT NULL,"\
	"VID CHAR NOT NULL,"\
	"CAPACITY INT NOT NULL,"\
	"FREE_CAPACITY INT NOT NULL,"\
	"RECYCLE_SIZE INT NOT NULL,"\
	"VIDEO_TOTAL_SIZE INT,"\
	"AUDIO_TOTAL_SIZE INT,"\
	"PHOTO_TOTAL_SIZE INT,"\
	"ISMOUNTED INT);"

#define SQLITE_INSERT_HDISK_RECORD \
    "INSERT INTO HDISK_TABLE VALUES(1,111,%llu,%llu,0,0,0,0)"

#define SQLITE_CREATE_BACKUP_FILE_TABLE \
	"create table IF NOT EXISTS backup_file_table("\
	"ID INT PRIMARY KEY NOT NULL,"\
	"FILE_UUID CHAR NOT NULL,"\
	"NAME CHAR NOT NULL,"\
	"SIZE INT NOT NULL,"\
	"TYPE INT NOT NULL,"\
	"TIME INT NOT NULL,"\
	"DEVICE_ID CHAR  NOT NULL,"\
	"FILE_STATUS INT NOT NULL,"\
	"PATH CHAR NOT NULL);"\

#define SQLITE_CREATE_VERSION_TABLE \
	"create table IF NOT EXISTS version_table("\
	"VERSION CHAR NOT NULL,"\
	"STATUS  INT  NOT NULL);"

#define SQLITE_CREATE_PARTITION_TABLE \
	"create table partition_table("\
	"ID INT PRIMARY KEY NOT NULL,"\
	"HDISK_ID INT,"\
	"NAME CHAR NOT NULL,"\
	"MOUNT_POINT CHAR NOT NULL,"\
	"TOTAL_SIZE  INT  NOT NULL,"\
	"FREE_SIZE   INT);"

#define SQLITE_ENABLE_WAL_MODE  "PRAGMA journal_mode=WAL;"
	
	

	
		


#endif

